@model IEnumerable<Claim>

@{
    ViewData["Title"] = "My Claims";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>My Claims History</h2>
            <p class="text-muted">View all your submitted claims and their current status</p>
        </div>
        <div class="col-auto">
            <a href="@Url.Action("Submit", "Claim")" class="btn btn-primary">
                <i class="fas fa-plus"></i> Submit New Claim
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h4 class="card-title mb-0">
                <i class="fas fa-history"></i> All Claims
            </h4>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Month</th>
                                <th>Year</th>
                                <th>Hours</th>
                                <th>Total Amount</th>
                                <th>Status</th>
                                <th>Progress</th>
                                <th>Submission Date</th>
                                <th>Last Updated</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in Model)
                            {
                                <tr>
                                    <td>@claim.Month</td>
                                    <td>@claim.Year</td>
                                    <td>@claim.HoursWorked</td>
                                    <td>R @claim.TotalAmount.ToString("N2")</td>
                                    <td>
                                        <span class="badge @GetStatusBadge(claim.Status)">
                                            @claim.Status
                                        </span>
                                    </td>
                                    <td style="width: 150px;">
                                        <div class="progress" style="height: 8px;" title="@claim.Status">
                                            <div class="progress-bar @GetStatusColor(claim.Status)"
                                                 style="width: @GetStatusProgress(claim.Status)%"></div>
                                        </div>
                                        <small class="text-muted">@GetStatusProgress(claim.Status)%</small>
                                    </td>
                                    <td>@claim.SubmissionDate.ToString("dd/MM/yyyy")</td>
                                    <td>@claim.SubmissionDate.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <a href="@Url.Action("Details", "Claim", new { id = claim.ClaimID })"
                                           class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i> Details
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No claims found</h5>
                    <p class="text-muted">You haven't submitted any claims yet</p>
                    <a href="@Url.Action("Submit", "Claim")" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Submit Your First Claim
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    private string GetStatusBadge(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Reviewed" => "bg-info",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Reviewed" => "bg-info",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private int GetStatusProgress(string status)
    {
        return status switch
        {
            "Pending" => 33,
            "Reviewed" => 66,
            "Approved" or "Rejected" => 100,
            _ => 0
        };
    }
}